version: '3'

includes:
  gcloud_config: 
    taskfile: "../gcloud/config.yaml"
  gcloud_services: 
    taskfile: "../gcloud/services.yaml"
  gcloud_artifacts_repositories: 
    taskfile: "../gcloud/artifacts_repositories.yaml"
  gcloud_builds: 
  gcloud_artifacts_repositories: 
    taskfile: "../gcloud/artifacts_repositories.yaml"
  gcloud_builds:
    taskfile: "../gcloud/builds.yaml"
  gcloud_secrets: 
    taskfile: "../gcloud/secrets.yaml"
  https:
    taskfile: "../common/https.yaml"

vars:
  INLINE_CONFIG: '{{.USER_WORKING_DIR}}/cloudbuild.yaml'
  SECRET_FILE: '{{.USER_WORKING_DIR}}/secret_value.txt'
  WEBHOOK_DATA: '{{.USER_WORKING_DIR}}/webhook_data.json'

tasks:

  set_gcp_project:
    requires:
      vars: [GCP_PROJECT]
    dir: '{{.USER_WORKING_DIR}}'
    cmds: 
      - task: gcloud_config:set_project

  enable_services:
    requires:
      vars: [GCP_PROJECT, GCP_SERVICES]
    dir: '{{.USER_WORKING_DIR}}'
    cmds: 
      - task: gcloud_services:enable
        vars:
          SERVICES: '{{.GCP_SERVICES}}'

  create_docker_repository:
    requires: 
      vars: [GCP_PROJECT, AR_LOCATION, AR_REPO]
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - task: gcloud_artifacts_repositories:create_if_not_exists
        vars:
          REPO_NAME: '{{.AR_REPO}}'
          REPO_LOCATION: '{{.AR_LOCATION}}'
          REPO_FORMAT: docker
          REPO_DESCRIPTION: "Docker repository"

  create_secret:
    requires:
      vars:
        - GCP_PROJECT
        - SECRET_NAME
    dir: '{{.USER_WORKING_DIR}}'
    vars:
      SECRET_VALUE:
        sh: 'tr -dc A-Za-z0-9 </dev/urandom | head -c 128 | md5sum | tr -d '' \-\n'''
    cmds:
      - echo -n '{{.SECRET_VALUE}}' > {{.SECRET_FILE}}
      - task: gcloud_secrets:create_with_file
        SECRET_FILE: '{{.SECRET_FILE}}' 


  create_builds_trigger:
    requires:
      vars:
        - GCP_PROJECT
        - PROJECT_NUMBER
        - TRIGGER_NAME
        - SECRET_NAME
    dir: '{{.USER_WORKING_DIR}}'
    vars:
      _SECRET_VERSION: '{{.SECRET_VERSION | default "latest"}}'
      TRIGGER_SECRET: 'projects/{{.PROJECT_NUMBER}}/secrets/{{.SECRET_NAME}}'
      BUILD_SERVICE_AGENT: 'service-{{.PROJECT_NUMBER}}@gcp-sa-cloudbuild.iam.gserviceaccount.com'
    cmds:
      - >-
        gcloud secrets
        add-iam-policy-binding {{.TRIGGER_SECRET}}
        --member='serviceAccount:{{.BUILD_SERVICE_AGENT}}'
        --role='roles/secretmanager.secretAccessor'
      - |-
        cat << EOF | yq -p json -o yaml | tee {{.INLINE_CONFIG}}
        {
            "steps": [
                {
                    "name": "gcr.io/cloud-builders/git",
                    "args": [
                        "clone",
                        "\${_GIT_REPO_URL}"
                    ]
                },
                {
                    "name": "gcr.io/google.com/cloudsdktool/cloud-sdk",
                    "args": [
                        "gcloud",
                        "builds",
                        "submit",
                        "--config",
                        "/workspace/\${_BUILD_DIR}/\${_BUILD_CFG}",
                        "--substitutions",
                        "\${_BUILD_SUBS}",
                        "--suppress-logs",
                        "/workspace/\${_BUILD_DIR}"
                    ]
                }
            ],
            "options": {
                "logging": "NONE",
                "dynamicSubstitutions": true,
                "automapSubstitutions": true,
                "substitutionOption": "ALLOW_LOOSE"
            },
            "substitutions": {
                "_BUILD_DIR": "\$(body.build.dir)",
                "_BUILD_CFG": "\$(body.build.cfg)",
                "_BUILD_SUBS": "\$(body.build.subs)",
                "_BUILD_TAG": "\$(body.build.tag)",
                "_GIT_REPO_URL": "\$(body.git.repo_url)"
            }
        }
        EOF
      - task: gcloud_builds:triggers:create_webhook
        vars:
          SECRET_VERSION: '{{._SECRET_VERSION}}'
          INLINE_CONFIG: '{{.INLINE_CONFIG}}'

  trigger_build:
    requires:
      vars:
        - GCP_PROJECT
        - TRIGGER_NAME
        - GIT_REPO_URL
        - GIT_REPO_DIR
        - REPO_NAME
        - REPO_LOCATION
        - IMAGE_NAME
        - IMAGE_TAG
    vars:
      SECRET_VALUE:
        sh: 'cat {{.SECRET_FILE}} | tr -d ''\n'''
      BUILD_TAG:
        sh: 'cat /proc/sys/kernel/random/uuid | tr -d ''\n'''
      API_KEY:
        sh: >-
          gcloud services api-keys list
          --filter='restrictions.apiTargets:cloudbuild.googleapis.com AND displayName~"^Cloud Build.*"'
          --format=json | jq -crM '.[0] | .name'
          | xargs -I% gcloud services api-keys get-key-string % --format=json
          | jq -crM '.keyString' | tr -d '\n'
    cmds:
      - |-
        cat << EOF | jq -crM | tee {{.WEBHOOK_DATA}}
        {
          "git": {
            "repo_url": "{{.GIT_REPO_URL}}"
          },
          "build": {
            "tag": "{{.BUILD_TAG}}",
            "dir": "{{.GIT_REPO_DIR}}",
            "cfg": "cloudbuild.yaml",
            "subs": "_BUILD_TAG={{.BUILD_TAG}},_REPO_LOCATION={{.REPO_LOCATION}},_REPO_NAME={{.REPO_NAME}},_IMAGE_NAME={{.IMAGE_NAME}},_IMAGE_TAG={{.IMAGE_TAG}}"
          }
        }
        EOF
      - task: https:exec_post
        vars:
          ENDPOINT: 'cloudbuild.googleapis.com/v1/projects/{{.GCP_PROJECT}}/triggers/{{.TRIGGER_NAME}}:webhook'
          QUERY: >-
            name==projects/{{.GCP_PROJECT}}/locations/global/triggers/{{.TRIGGER_NAME}}
            secret=={{.SECRET_VALUE}}
            key=={{.API_KEY}}
          HEADERS: >-
            content-type:'application/json'
          BODY: '@{{.WEBHOOK_DATA}}'
  gcloud_artifacts_repositories: 
    taskfile: "../gcloud/artifacts_repositories.yaml"
