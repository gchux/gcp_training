version: '3'

includes:
  gcloud_secrets_versions:
    taskfile: 'secrets_versions.yaml'
    aliases: [versions]

vars:
  G_SECRETS_CMD: 'gcloud secrets'

tasks:

  default:
    cmds:
      - cmd: echo '{{.G_SECRETS_CMD}} ...'

  create:
    requires:
      vars:
        - GCP_PROJECT
        - SECRET_NAME
        - SECRET_VALUE
    dir: '{{.USER_WORKING_DIR}}'
    vars:
      SECRET_EXISTS:
        sh: >-
          gcloud secrets list
          --format='json(name)'
          --filter='name~/{{.SECRET_NAME}}$'
          --project=chux-testing
          | jq -crM '. | length'
      _G_SECRETS_CMD: >-
        {{if eq .SECRET_EXISTS "0"}}{{.G_SECRETS_CMD}} create{{else}}{{.G_SECRETS_CMD}} versions add{{end}}
    cmds:
      - >-
        printf '{{.SECRET_VALUE}}'
        | {{._G_SECRETS_CMD}}
        {{.SECRET_NAME}}
        --data-file=-
        --replication-policy='automatic'
        --project={{.GCP_PROJECT}}

  create_with_file:
    requires:
      vars:
        - GCP_PROJECT
        - SECRET_NAME
        - SECRET_FILE
    dir: '{{.USER_WORKING_DIR}}'
    vars:
      SECRET_EXISTS:
        sh: >-
          gcloud secrets list
          --format='json(name)'
          --filter='name~/{{.SECRET_NAME}}$'
          --project=chux-testing
          | jq -crM '. | length'
      _G_SECRETS_CMD: >-
        {{if eq .SECRET_EXISTS "0"}}{{.G_SECRETS_CMD}} create{{else}}{{.G_SECRETS_CMD}} versions add{{end}}
    cmds:
      - >-
        {{._G_SECRETS_CMD}}
        {{.SECRET_NAME}}
        --data-file={{.SECRET_FILE}}
        --replication-policy='automatic'
        --project={{.GCP_PROJECT}}
