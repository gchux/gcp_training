version: '3'

includes:
  gcloud_appengine:
    taskfile: "../gcloud/appengine.yaml"
  gcloud_identity:
    taskfile: "../gcloud/identity.yaml"

vars:
  OIDC_IDP_JSON: '{{.USER_WORKING_DIR}}/idp_provider.json'

tasks:

  produce_oidc_provider:
    internal: true
    requires:
      vars: [GCP_PROJECT, GAE_SERVICE, PROVIDER_NAME]
    dir: '{{.USER_WORKING_DIR}}'
    vars:
      GAE_VERSIONS_FILE: '{{.USER_WORKING_DIR}}/gae_versions.json'
      GAE_ENV_VARS_FILE: '{{.USER_WORKING_DIR}}/gae_env_vars.json'
      VERSIONS_FILTER: '.[0].version.id'
    cmds:
      - task: gcloud_appengine:app_versions:list
        vars:
          FORMAT: '''json(version.id)'''
          FILTER: '''traffic_split=1.0'''
          OUTPUT: '{{.GAE_VERSIONS_FILE}}'
      - task: gcloud_appengine:app_versions:describe
        vars:
          GAE_VERSION:
            sh: 'jq -rcM ''{{.VERSIONS_FILTER}}'' {{.GAE_VERSIONS_FILE}}'
          FORMAT: '''json(envVariables)'''
          OUTPUT: '{{.GAE_ENV_VARS_FILE}}'
      - |
        OIDC_CLIENT_ID=`jq -rcM '.envVariables.OIDC_CLIENT_ID' {{.GAE_ENV_VARS_FILE}}`
        OIDC_CLIENT_SECRET=`jq -rcM '.envVariables.OIDC_CLIENT_SECRET' {{.GAE_ENV_VARS_FILE}}`
        OIDC_ISSUER=`jq -rcM '.envVariables.OIDC_ISSUER' {{.GAE_ENV_VARS_FILE}}`
        cat << EOF > {{.OIDC_IDP_JSON}}
        {
          "name": "{{.PROVIDER_NAME}}",
          "clientId": "${OIDC_CLIENT_ID}",
          "issuer": "${OIDC_ISSUER}",
          "displayName": "{{.PROVIDER_NAME}}",
          "enabled": true,
          "clientSecret": "${OIDC_CLIENT_SECRET}",
          "responseType": {
            "idToken": false,
            "code": true
          }
        }
        EOF
        jq -rcM < {{.OIDC_IDP_JSON}} | sponge {{.OIDC_IDP_JSON}}
      - cat -n {{.OIDC_IDP_JSON}}

  create_oidc_provider:
    requires:
      vars: [GCP_PROJECT, GAE_SERVICE, PROVIDER_NAME]
    dir: '{{.USER_WORKING_DIR}}'
    deps:
      - task: produce_oidc_provider
    vars:
      HOSTNAME: '{{.AUTHORIZED_PORT}}-{{.AUTHORIZED_DOMAIN}}'
      API_KEY: '{{.USER_WORKING_DIR}}/apiKey.json'
      AUTHORIZED_DOMAINS: '{{.USER_WORKING_DIR}}/authorizedDomains.json'
      CLIENT_PERMISSIONS: '{{.USER_WORKING_DIR}}/clientPermissions.json'
    cmds:
      - task: gcloud_identity:providers:create_oidc
        vars:
          GCP_PROJECT: '{{.GCP_PROJECT}}'
          PROVIDER_NAME: '{{.PROVIDER_NAME}}'
          PROVIDER_JSON: '@{{.OIDC_IDP_JSON}}'
      - task: gcloud_identity:get_config
        vars:
          GCP_PROJECT: '{{.GCP_PROJECT}}'
          FIELD: client.apiKey
          OUTPUT: '{{.API_KEY}}'
      - task: gcloud_identity:get_config
        vars:
          GCP_PROJECT: '{{.GCP_PROJECT}}'
          FIELD: authorizedDomains
          OUTPUT: '{{.AUTHORIZED_DOMAINS}}'
      - >-
        jq -rcM '. -= ["{{.HOSTNAME}}"]' < '{{.AUTHORIZED_DOMAINS}}'
        | jq -rcM '. += ["{{.HOSTNAME}}"] | {authorizedDomains:.}'
        | sponge '{{.AUTHORIZED_DOMAINS}}'
      - task: gcloud_identity:update_config
        vars:
          GCP_PROJECT: '{{.GCP_PROJECT}}'
          FIELD_KEY: authorizedDomains
          FIELD_VALUE: '@{{.AUTHORIZED_DOMAINS}}'
      - task: gcloud_identity:get_config
        vars:
          GCP_PROJECT: '{{.GCP_PROJECT}}'
          FIELD: client.permissions
          OUTPUT: '{{.CLIENT_PERMISSIONS}}'
      - >-
        jq -rcM '.disabledUserSignup=false | {client:{permissions:.}}'
        < '{{.CLIENT_PERMISSIONS}}'
        | sponge '{{.USER_WORKING_DIR}}/clientPermissions.json'
      - task: gcloud_identity:update_config
        vars:
          GCP_PROJECT: '{{.GCP_PROJECT}}'
          FIELD_KEY: client.permissions
          FIELD_VALUE: '@{{.CLIENT_PERMISSIONS}}'
      - |-
        API_KEY=`cat {{.API_KEY}} | tr -d '\n'`
        cat << EOF > index.html
        <script src="https://www.gstatic.com/firebasejs/8.0/firebase.js"></script>
        <script>
        var config = {apiKey:"${API_KEY}",authDomain:"{{.GCP_PROJECT}}.firebaseapp.com"};
        firebase.initializeApp(config);
        var provider = new firebase.auth.OAuthProvider('oidc.{{.PROVIDER_NAME}}');
        firebase.auth().signInWithPopup(provider)
        .then((result) => {
        console.log(result);
        document.body.innerHTML = '<pre id="json"></pre>';
        document.getElementById("json").innerText = JSON.stringify(result, null, 2);
        })
        .catch((error) => { console.log(error); });
        </script>
        EOF
      - cmd: 'echo go to: https://{{.HOSTNAME}}/'
      - python -m http.server {{.AUTHORIZED_PORT}}
